# GitHub Actions Release Workflow Template for LLM Tab Cleaner
# Save this file as .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "Releasing version: $TAG"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

  run-full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run complete test suite
        run: |
          uv run pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Validate package metadata
        run: |
          uv build
          uv run twine check dist/*

  build-and-sign:
    name: Build and Sign Package
    runs-on: ubuntu-latest
    needs: [run-full-test-suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Build package
        run: uv build

      - name: Sign packages with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: ./dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-signed
          path: |
            dist/
            *.sigstore

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [validate-tag]
    if: github.event_name == 'push'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "^${{ needs.validate-tag.outputs.version }}$" | head -n 1)
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using first commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate changelog
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" "${PREV_TAG}..HEAD" | grep -E "^- (feat|fix|docs|test|refactor|perf|chore)" || echo "- Initial release")
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, generate-changelog, build-and-sign]
    if: github.event_name == 'push'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-signed
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-tag.outputs.version }}
          name: Release v${{ needs.validate-tag.outputs.version }}
          body: |
            ## Changes in v${{ needs.validate-tag.outputs.version }}
            
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            pip install llm-tab-cleaner==${{ needs.validate-tag.outputs.version }}
            ```
            
            ## Verification
            
            All packages are signed with [Sigstore](https://www.sigstore.dev/) and can be verified using:
            
            ```bash
            pip install sigstore
            python -m sigstore verify identity \
              --cert dist/*.sigstore \
              --oidc-issuer https://token.actions.githubusercontent.com \
              --cert-identity ${{ github.server_url }}/${{ github.repository }}/.github/workflows/release.yml@refs/tags/v${{ needs.validate-tag.outputs.version }}
            ```
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.sigstore
          draft: false
          prerelease: ${{ contains(needs.validate-tag.outputs.version, 'rc') || contains(needs.validate-tag.outputs.version, 'beta') || contains(needs.validate-tag.outputs.version, 'alpha') }}

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-sign, run-full-test-suite]
    environment: pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-signed
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Build documentation
        run: uv run mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-to-pypi, update-documentation]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- PyPI Publish: ${{ needs.publish-to-pypi.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.update-documentation.result }}" >> $GITHUB_STEP_SUMMARY